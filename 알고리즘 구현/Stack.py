#
# 스택(Stack)은 데이터를 일시적으로 저장하거나 꺼내는 데 사용되는 자료구조 중 하나로,
# 데이터를 "위에서만" 넣고 "위에서만" 뺄 수 있는 선형 구조입니다. 이런 특성 때문에 스택은
# "나중에 넣은 데이터가 먼저 나오는" 후입선출(LIFO - Last-In-First-Out) 구조를 가지고 있습니다.
#
# 스택은 일상 생활에서도 많이 볼 수 있는 것으로, 책을 쌓아놓거나 플레이트를 쌓아놓는 것과 비슷한 원리를 가지고 있습니다.
# 가장 위에 쌓인 데이터는 가장 먼저 꺼낼 수 있습니다.
#
# 스택의 주요 동작은 다음과 같습니다:
#
# Push: 데이터를 스택의 가장 위에 추가하는 작업을 의미합니다.
# Pop: 스택의 가장 위에 있는 데이터를 꺼내는 작업을 의미합니다.
# Top 또는 Peek: 스택의 가장 위에 있는 데이터를 조회하는 작업을 의미합니다.
# Empty: 스택이 비어있는지 여부를 확인하는 작업을 의미합니다.
# 스택은 여러 상황에서 유용하게 사용됩니다.
# 예를 들어, 함수 호출 시 함수의 실행 컨텍스트를 스택에 저장하여 함수가 호출된 역순으로 실행 컨텍스트를 관리하거나,
# 웹 브라우저에서 "뒤로 가기"와 같은 동작을 구현할 때 방문한 웹 페이지의 이력을 스택에 저장하여 관리할 수 있습니다.
# 스택은 코딩 테스트나 실제 프로그래밍에서도 다양한 문제를 해결하는 데 활용됩니다.


def is_valid(s):
    stack = []  # 열린 괄호를 저장하기 위한 스택
    bracket_map = {')': '(', '}': '{', ']': '['}  # 닫힌 괄호와 열린 괄호의 매핑

    for char in s:
        if char in bracket_map.values():  # 열린 괄호인 경우
            stack.append(char)
        elif char in bracket_map.keys():  # 닫힌 괄호인 경우
            if not stack or stack.pop() != bracket_map[char]:
                return False
        else:  # 다른 문자인 경우 (괄호가 아닌 경우)
            return False

    return len(stack) == 0  # 스택이 비어있으면 모든 괄호가 맞게 닫힘


# 테스트 케이스
expression1 = "{[()()]}"  # 유효한 표현식
expression2 = "{[(])}"  # 유효하지 않은 표현식

print(is_valid(expression1))  # 출력: True
print(is_valid(expression2))  # 출력: False

# is_valid 함수는 문자열 s를 입력으로 받아, 문자열 내의 괄호 쌍이 유효한지 여부를 확인한 후, True나 False를 반환합니다.
# stack 리스트는 열린 괄호들을 저장하기 위한 스택입니다.
# bracket_map 딕셔너리는 각 종류의 닫힌 괄호와 그에 대응하는 열린 괄호를 매핑합니다.
# 반복문은 문자열의 각 문자를 순회합니다:
# 열린 괄호인 경우, 스택에 추가됩니다.
# 닫힌 괄호인 경우, 스택의 맨 위 요소와 비교하여 올바른 괄호 쌍인지 확인합니다.
# 다른 문자인 경우 (괄호가 아닌 경우), 유효하지 않은 상황이므로 False를 반환합니다.
# 마지막으로, 스택이 비어있으면 모든 괄호가 올바르게 닫혔으므로 True를 반환합니다.
# 주어진 코드를 여러 입력 문자열로 테스트하여 주어진 규칙에 따라 유효한지 여부를 확인해볼 수 있습니다.