# 나머지가 1이 되는 수 찾기
# 자연수 n이 매개변수로 주어집니다.
# n을 x로 나눈 나머지가 1이 되도록 하는 가장 작은 자연수 x를
# return 하도록 solution 함수를 완성해주세요. 답이 항상 존재함은 증명될 수 있습니다.
#
# 제한사항
# 3 ≤ n ≤ 1,000,000

def solution(n):
    for i in range(1, n+1):
        if n % i == 1:
            return i  # n을 i로 나눈 나머지가 1이면 i를 반환 (원하는 조건을 만족하는 경우)

# 사용자로부터 입력 받기
user_input = int(input("자연수를 입력하세요: "))  # 사용자로부터 자연수 입력 받음

# solution 함수 호출 및 결과 출력
result = solution(user_input)  # solution 함수에 사용자 입력값을 전달하여 결과 계산
print(f"n을 x로 나눈 나머지가 1이 되는 가장 작은 자연수 x: {result}")  # 결과 출력


# range(1, n+1)은 1부터 n까지의 숫자 범위를 생성합니다. 하지만 문제에서 주어진 조건은
# "n을 x로 나눈 나머지가 1이 되도록 하는 가장 작은 자연수 x"를 찾는 것입니다.
# 따라서 x는 n보다 커야 하며, 주어진 조건에 의해 x가 n으로 나눈 나머지가 1이 되어야 합니다.
#
# range(1, n+1) 범위에서 검사하게 되면, n 이상의 숫자에 대해서는 n을 나눈 나머지가 무조건 1보다 작게 됩니다.
# 그래서 1부터 n까지의 범위에서는 원하는 조건을 만족하는 x를 찾을 수 없습니다.
#
# 따라서 x는 n 이상인 값 중에서 n을 나눈 나머지가 1이 되는 값을 찾아야 합니다.
# 그래서 x의 시작 값을 n+1로 설정하여 range(n+1, ...) 범위에서 검사하게 됩니다.
# 이렇게 하면 x가 n 이상이기 때문에 n을 나눈 나머지가 1이 되는 경우를 찾을 수 있습니다.

# def solution(n):
#     x = n + 1  # n보다 큰 값부터 시작
#
#     while True:
#         if x % n == 1:  # x를 n으로 나눈 나머지가 1이면
#             return x  # x를 반환
#         x += 1  # 다음 숫자로 계속 진행
#
#
# # 테스트
# n = 7
# print(solution(n))  # 출력: 4

# range를 사용한 방식:
#
# for 루프를 사용하여 1부터 n까지의 수를 하나씩 검사합니다.
# if n % i == 1: 조건을 통해 n을 i로 나눈 나머지가 1인 경우를 찾습니다.
# 이 방식은 x의 범위를 1부터 n까지로 한정하여 모든 수를 검사하며 원하는 조건을 만족하는 x를 찾는 방식입니다.
# while 루프를 사용한 방식:
#
# while 루프를 사용하여 n보다 큰 값부터 순차적으로 x를 증가시키면서 조건을 검사합니다.
# if x % n == 1: 조건을 통해 x를 n으로 나눈 나머지가 1인 경우를 찾습니다.
# 이 방식은 x의 범위를 n 이상으로 설정하여 원하는 조건을 만족하는 x를 찾는 방식입니다.
# 두 방식 모두 결과적으로는 원하는 조건을 만족하는 x를 찾아내며,
# 어떤 방식을 사용하느냐에 따라 코드의 구현이 조금씩 달라질 수 있습니다.
# 이런 차이점은 주로 개인의 코딩 스타일이나 문제에 대한 이해에 따라 선택됩니다.